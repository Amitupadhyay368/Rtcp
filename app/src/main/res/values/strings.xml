<resources>
    <string name="app_name">Rtcp</string>
    <string name="title_activity_homescreen">homescreen</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">RTCP</string>
    <string name="nav_header_desc">RTCP</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Learn basics of C++</string>
    <string name="menu_slideshow">Compitetive C++</string>
    <string name="menu_tools">Test Your Knowledge</string>
    <string name="menu_share">Share</string>
    <string name="title_activity_home_screen_two">homeScreenTwo</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="menu_send">Send</string>
    <string name="basic"><![CDATA[* What is C++?  \n  1. C++ is an object-oriented programming language.\n It is an extension to C programming \n 2. C++ was developed by Bjarne Stroustrup, as an extension to the C language \n 3. C++ tutorial provides basic and advanced concepts of C++. \nOur C++ tutorial is designed for beginners and professionals.\n 4. C++ is a middle-level language, as it encapsulates both high and low level language features.\n 5. C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa. \n  * Usage of C++ : \n   By the help of C++ programming language, we can develop different types of secured and robust applications: \n 1. Window application \n 2. Client-Server application \n 3. Device drivers \n 4. Embedded firmware etc.   \n C++ Quickstart: \n* To write the first C++ program,  open the C++ console and write the following code \n \n  #include <iostream.h>  \n  #include<conio.h> \n   void main() {   \n   clrscr();   \n cout << \'welcome to C++ Programming.\';  \n   getch();\n }\n \n >.#include<iostream.h> includes the standard input output library functions.\n
	>.It provides cin and cout methods for reading from input and writing to output.\n
	>. #include <conio.h> includes the console input output library functions.\n The getch() function is defined in conio.h file.\n
	>. cout << "Welcome to C++ Programming.\n" is used to print the data "Welcome to C++ Programming." on the console.\n
	>. Now click on the compile menu then compile sub menu to compile the c++ program.\n \n \n
]]></string>
    <string name="basicone">1. A variable is a name of memory location.\n It is used to store data.\n Its value can be changed and it can be reused many times.\n
	2. It is a way to represent memory location through symbol so that it can be easily identified.\n
	3. In C++, there are different types of variables (defined with different keywords), for example:\n int - stores integers (whole numbers), \nwithout decimals, such as 123 or -123 \n	double - stores floating point numbers, with decimals, such as 19.99 or -19.99 \nchar - stores single characters, such as a or B.\n Char values are surrounded by single quotes \n string - stores text, such as \"Hello World\".\n String values are surrounded by double quotes. \nbool - stores values with two states\: true or false \nLet\'s see the syntax to declare a variable\: \n type variable_list\; \nThe example of declaring variable is given below: \nint x\; \nfloat y\; \nchar z\; \nHere, x, y, z are variables and int, float, char are data types. \nWe can also provide values while declaring the variables as given below\: \nint x=5,b=10\;  //declaring 2 variable of integer type  \nfloat f=30.8\; \nchar c=\'A\'\; \nRules for defining variables\:\n
	A variable can have alphabets, digits and underscore.\n
	A variable name can start with alphabet and underscore only. \nIt can\'t start with digit.\n
	No white space is allowed within variable name.\n
	A variable name must not be any reserved word or keyword e.g. char, float etc.\n\n\n
    </string>
    <string name="basictwo">A data type specifies the type of data that a variable can store such as integer, floating, character etc.\n
	There are 4 types of data types in C++ language.\n\n
</string>
    <string name="basicthree">Operators are used to perform operations on variables and values.\n
In the example below, we use the + operator to add together two values\:\n
EXAMPLE\:- int sum1 = 100 + 50\; \n  // 150 (100 + 50)\n int sum2 = sum1 + 250\;\n // 400 (150 + 250)\n
C+ divides the operators into the following groups\:\n
 1.Arithmetic operators\n
 2.Assignment operators\n
 3.Comparison operators\n
 4.Logical operators\n
 5.Bitwise operators</string>
    <string name="basicfour">A keyword is a reserved word. You cannot use it as a variable name, constant name etc.\n A list of 32 Keywords in C++
	Language which are also available in C language are given below.\n</string>
    <string name="basicfive">Namespace in C++\:\n
	1. Namespaces allow us to group named entities that otherwise would have global scope into narrower scopes, giving them namespace scope.\n
	2. Namespace is a feature added in C++ and not present in C.\n
	3. A namespace is a declarative region that provides a scope to the identifiers (names of the types, function, variables etc) inside it.\n	
	4. Namespace declarations appear only at global scope.\n
	5. Namespace declarations can be nested within another namespace.\n
	6. Namespace declarations don’t have access specifiers. (Public or private)\n
	7. No need to give semicolon after the closing brace of definition of namespace.\n
</string>
    <string name="basicsix">Use the switch statement to select one of many code blocks to be executed.\n
	switch(expression) {\n case x: \n// code block \nbreak; \case y: \n// code block\n  break; \n default:\n  // code block\n  }\n
	> The switch expression is evaluated once\n
	> The value of the expression is compared with the values of each case\n
	> If there is a match, the associated block of code is executed\n
	> The break and default keywords are optional, and will be described later in this chapter\n
	   </string>
    <string name="basicseven">* When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:\n\n
SYNTAX:-\n\n	for(initialization; condition; incr/decr){\n    
		//code to be executed \n   
		}\n\n C++ Nested For Loop:\n\n
        * In C++, we can use for loop inside another for loop, it is known as nested for loop. \n
       The inner loop is executed fully when outer loop is executed one time.\n
EXAMPLE: </string>
    <string name="basiceight">C++ While loop:\n\n
 while loop loops through a block of code as long as a specified condition is true:\n
SYNTAX:\n\n
	while (condition) { \n	 // code block to be executed \n }\n
In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:\n
   EXAMPLE:</string>
    <string name="basicnine">The do/while loop is a variant of the while loop.\n
	This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop 	as long as the condition is true.\n
SYNTAX:\n\n	do { \n // code block to be executed \n} \nwhile (condition);\n EXAMPLE:
</string>
    <string name="basicten">\nC++ Functions:\n\n
	A function is a block of code which only runs when it is called.\n
	You can pass data, known as parameters, into a function.\n
	Functions are used to perform certain actions, and they are important for reusing code:\n Define the code once, and use it many times.\n Declaration of a function:\n return_type function_name(data_type parameter...) \n 
{  \n  
//code to be executed \n   
} \n </string>
    <string name="basicelleven">\nCall by value and call by reference in C++:\n
	There are two ways to pass value or data to function in C language:\n call by value and call by reference.\n Original value is not modified in call by value but it is modified in call by reference.\n Call by value in C++:
	\n In call by value, original value is not modified.\n
	\n In call by value, value being passed to the function is locally stored by the function parameter in stack memory location.\n </string>
    <string name="basictwelve">
        In call by reference, original value is modified because we pass reference (address).
        Here, address of the value is passed in the function, so actual and formal arguments share the same address space.Hence, value changed inside the function, is reflected inside as well as outside the function.
       \n Note: To understand the call by reference, you must have the basic knowledge of pointers.</string>
    <string name="basictherteen">1.When function is called within the same function, it is known as recursion in C++. The function which calls 	   the  same function, is known as recursive function.
	2. A function that calls itself, and doesn\'t perform any task after function call, is known as tail recursion. In tail 	     recursion, we generally call the same function with return statement.
\nEXAMPLE:-
</string>
    <string name="basicfourteen">
        A pointer however, is a variable that stores the memory address as its value.\n
	1 Pointer reduces the code and improves the performance, it is used to retrieving strings, trees etc. and use with arrays, structures and functions.\n
	2 We can return multiple values from function using pointer.\n
	3 It makes you able to access any memory location in the computer\'s memory.\n

    Declaring a pointer\n
	The pointer in C++ language can be declared using \∗ (asterisk symbol).\n
	int \∗   a; pointer to int   \n 
	char \∗  c; pointer to char 
    </string>
    <string name="basicfifteen">
        Array is a  Collection of similar type of data having specific memory  location\n
Array is a container that encapsulates fixed size arrays. In C++, array index starts from 0. We can store only fixed set of elements in C++ array.\n

Advantages of C++ Array:\n
	1.Code Optimization (less code)\n
	2.Random Access\n
	3.Easy to traverse data\n
	4.Easy to manipulate data\n
	5.Easy to sort data etc\n

C++ Array Types:\n
	 There are 2 types of arrays in C++ programming:\n
	1.Single Dimensional Array\n
	2.Multidimensional Array\n

C++ Single Dimensional Array:\n
	 1.A one-dimensional array (or single dimension array) is a type of linear array.\n
	2. Accessing its elements involves a single subscript which can either represent a row or column index\n
    </string>

    <string name="basicsixteen">
        Multidimensional arrays are an extension of 2-D matrices and use additional subscripts for indexing. 
The multidimensional array is also known as rectangular arrays in C++.
 It can be two dimensional or three dimensional. The data is stored in tabular form (row ∗ column) which is also known as matrix.
\nEXAMPLE:\n
	 Two dimensional array:\n
	int two_d[10][20];	\n
Three dimensional array: \n
        int three_d[10][20][30];
    </string>
    <string name="comp_part1">The C++ Standard Template Library (STL)
The Standard Template Library (STL) is a set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc. It is a library of container classes, algorithms, and iterators. It is a generalized library and so, its components are parameterized. A working knowledge of template classes is a prerequisite for working with STL.
STL has four components
•	Algorithms
•	Containers
•	Functions
•	Iterators




Algorithm:
The header algorithm defines a collection of functions especially designed to be used on ranges of elements.They act on containers and provide means for various operations for the contents of the containers.
</string>
    <string name="whycomp">C++ is by far the the most popular language of choice for competitive programmers across the world as it is usually faster than Java and Python, and most of the resources are available in C++. C++ also has a vast library called STL(Standard Template Library) which makes life a lot easier for competitive coders</string>
    <string name="screencomp">sorting is one of the most basic functions applied to data. It means arranging the data in a particular fashion, which can be increasing or decreasing. There is a builtin function in C++ STL by the name of sort().
This function internally uses IntroSort. In more details it is implemented using hybrid of QuickSort, HeapSort and InsertionSort.By default, it uses QuickSort but if QuickSort is doing unfair partitioning and taking more than N*logN time, it switches to HeapSort and when the array size becomes really small, it switches to InsertionSort.
The prototype for sort is :
sort(startaddress, endaddress)
startaddress: the address of the first element of the array
endaddress: the address of the next contiguous location of the last element of the array.
So actually sort() sorts in the range of [startaddress,endaddress)
Example:-
    </string>
    <string name="searchingscr">Binary search is a widely used searching algorithm that requires the array to be sorted before search is applied. The main idea behind this algorithm is to keep dividing the array in half (divide and conquer) until the element is found, or all the elements are exhausted.
It works by comparing the middle item of the array with our target, if it matches, it returns true otherwise if the middle term is greater than the target, the search is performed in the left sub-array.
If the middle term is less than target, the search is performed in the right sub-array.

The prototype for binary search is :
binary_search(startaddress, endaddress, valuetofind)
startaddress: the address of the first element of the array.
endaddress: the address of the last element of the array.
valuetofind: the target value which we have to search for.

Example:-

</string>
    <string name="impstl">For all those who aspire to excel in competitive programming, only having a knowledge about containers of STL is of less use till one is not aware what all STL has to offer.
STL has an ocean of algorithms, for all  library functions .
Some of the most used algorithms on vectors and most useful one’s in Competitive Programming are mentioned as follows :


1.	sort(first_iterator, last_iterator) – To sort the given vector.
2.	reverse(first_iterator, last_iterator) – To reverse a vector.
3.	\*max_element (first_iterator, last_iterator) – To find the maximum element of a vector.
4.	\*min_element (first_iterator, last_iterator) – To find the minimum element of a vector.
5.	accumulate(first_iterator, last_iterator, initial value of sum) – Does the summation of vector elements

example:-
</string>
    <string name="screen5">From C++11 onwards, some new and interesting algorithms are added in STL of C++. These algorithms operate on an array and are useful in saving time during coding and hence useful in competitive programming as well.
all_of()
This function operates on whole range of array elements and can save time to run a loop to check each elements one by one. It checks for a given property on every element and returns true when each element in range satisfies specified property, else returns false.

EXAMPLE:
</string>
    <string name="img2">any_of()
This function checks for a given range if there’s even one element satisfying a given property mentioned in function. Returns true if at least one element satisfies the property else returns false.

EXAMPLE:
</string>
    <string name="img3">none_of()
This function returns true if none of elements satisfies the given condition else returns false.
EXAMPLE:-
</string>
    <string name="img4">copy_n()
copy_n() copies one array elements to new array. This type of copy creates a deep copy of array. This function takes 3 arguments, source array name, size of array and the target array name.

EXAMPLE:-
</string>
    <string name="img5">iota()
This function is used to assign continuous values to array. This function accepts 3 arguments, the array name, size, and the starting number.
Example:-
</string>
    =======
    <string name="basicseventeen">

        C++ What is OOP?\n
	\> OOP stands for Object-Oriented Programming.\n
	\> Object Oriented Programming is a paradigm that provides many concepts such as inheritance, data binding, 	polymorphism etc.\n
	\>  OOP is faster and easier to execute	\n
	\> OOP provides a clear structure for the programs\n
	\> OOP helps to keep the C++ code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify 	     and debug\n
        \> Object means a real word entity such as pen, chair, table etc. Object-Oriented Programming is a 	methodology or paradigm to design a program using classes and objects.\n
	\> It simplifies the software development and maintenance by providing some concepts:\n
	1.Object\n
	2.Class\n
	3.Inheritance\n
	4.Polymorphism\n
	5.Abstraction\n
	6.Encapsulation\n

Object:
                      > Classes and objects are the two main aspects of object-oriented programming.\n
                      >Any entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike etc. 	   It can be 	physical and logical.
                     > Object is a runtime entity, it is created at runtime.\n
Class:
	Collection of objects is called class. It is a logical entity.\n


Inheritance:\n
	When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It 	  provides code reusability. It is used to achieve runtime polymorphism.
Polymorphism\n
	When one task is performed by different ways i.e. known as polymorphism. For example: to convince the customer\n
	     differently, to draw something e.g. shape or rectangle etc.\n
        
    Abstraction:\n
Hiding internal details and showing functionality is known as abstraction. For example: phone call, we don\'t 	know the  internal processing.\n
	In C++, we use abstract class and interface to achieve abstraction.\n
Encapsulation\n
	Binding (or wrapping) code and data together into a single unit is known as encapsulation. For example: 	capsule, it is wrapped with different medicines.\n

Advantage of OOPs :\n
	1.OOPs makes development and maintenance easier where as in Procedure-oriented programming language it   	is not easy to manage if code grows as project size grows.\n
	2. OOPs provide data hiding whereas in Procedure-oriented programming language a global data can be 	accessed from anywhere.\n
	3.  We can provide the solution of real word problem if we are using the Object-Oriented Programming 	language.\n
    

    </string>

    <string name="basiceighteen">
		Namespaces in C++ are used to organize too many classes so that it can be easy to handle the application.\n
	For accessing the class of a namespace, we need to use namespacename::classname. \n
	We can use using keyword so that we don\'t have to use complete name all the time.\n
                       In C++, global namespace is the root namespace. The global::std will always refer to the namespace "std" of 	C+Framework.\n

	</string>

    <string name="basicnineteen">
		A template is a simple and yet very powerful tool in C++.\n
It allows you to define the generic classes and generic functions and thus provides support for generic programming.\n Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types.

Templates can be represented in two ways:\n
Function templates\n
Class templates\n

Function Templates:\n
	> We can define a template for a function.\n
	> The type of the data that the function will operate on depends on the type of the data passed as a parameter.
	 \nexample- if we have an add() function, we can create versions of the add function for adding the int, float or  		double type values.
	\n> A Generic function is created by using the keyword template. The template defines what function will do.
SYNTAX:-\n
	template &lt; classType \> ret\_type func\_name(parameter\_list)  
	\n{  
	  \n  // body of function.  
	\n}  
	Where Ttype\: It is a placeholder name for a data type used by the function. \n

Class Template\:\n
	> We can define a template for a class.\n
	\n example\- a class template can be created for the array class that can accept the array of various types such as 		int array, float array or double array.
	\n>  When a class uses the concept of Template, then the class is known as generic class\.\syntax\:\-\n
	\ntemplate &lt; class Ttype\>
	\nclass class\_name  
	\n\{
	\n\.
	\n\.
	\n\}

	</string>
    <string name="contact"> This Is a Developer Section  </string>


</resources>
